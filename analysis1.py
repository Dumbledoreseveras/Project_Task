# -*- coding: utf-8 -*-
"""analysis1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qngBm5DLSE7JTOB6p2OK_9HZfBr5xT11
"""

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk
import webbrowser
import os
from wordcloud import WordCloud

nltk.download('vader_lexicon')

sia = SentimentIntensityAnalyzer()

apps_df = pd.read_csv('/content/Play Store Data.csv')
reviews_df = pd.read_csv('/content/User Reviews.csv')

apps_df = apps_df.dropna(subset=['Rating'])
for column in apps_df.columns:
  apps_df[column].fillna(apps_df[column].mode()[0], inplace=True)
apps_df.drop_duplicates(inplace=True)
apps_df_rating = apps_df[apps_df['Rating']==5]
reviews_df.dropna(subset=['Translated_Review'],inplace=True)
apps_df[column].fillna(apps_df[column].mode()[0],inplace=True)

from wordcloud import WordCloud, STOPWORDS

nltk.download('stopwords')

reviews_df['Translated_Review'] = reviews_df['Translated_Review'].astype(str).str.replace(',','').str.replace('.','').str.replace('!','').str.replace('?','').str.replace(':','').astype(str)

apps_df_fitness = apps_df[apps_df['Category']=='Health & Fitness']
stop_words = set(STOPWORDS)

merged_df = reviews_df.merge(apps_df_fitness, on ='App', how='inner')

five_star = merged_df[merged_df['Rating'] == 5]['Translated_Review']
five_star_reviews = ' '.join(five_star)

import matplotlib.pyplot as plt

wordcloud = WordCloud(
    width=800, height=400,
    background_color='white',
    stopwords=stop_words,
    min_font_size=10
).generate(five_star_reviews)
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)
plt.show()

apps_df = apps_df.dropna(subset=['Reviews'])
apps_df['Reviews'] = apps_df['Reviews'].fillna(0)
apps_df['Reviews'] = apps_df['Reviews'].astype(int)

print(apps_df['Reviews'].dtype)

apps_df = apps_df[apps_df['Reviews']>1000]